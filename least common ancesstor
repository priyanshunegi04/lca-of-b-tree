
#include<stdio.h>
#include<stdlib.h>

struct node{
  int data;
  struct node *left;
  struct node *right;    
};

struct node* newNode(int val){
    struct node* temp = (struct node*) malloc(sizeof(struct node));
    temp->data = val;
    temp->left = NULL;
    temp->right = NULL;
    return temp;
}

int lcaOfbinaryTree(struct node* root, int x, int y){
    if(root == NULL){
        return -1;
    }
    
    if(root->data == x || root->data == y){
      return root->data;
    }    
    
    int leftAns = lcaOfbinaryTree(root->left, x, y);
    int rightAns = lcaOfbinaryTree(root->right, x, y);
    
    if(leftAns !=-1 && rightAns == -1){
        return leftAns;
    }
    
   else if(leftAns == -1 && rightAns != -1){
        return rightAns;
    }
    
    else if(leftAns != -1 && rightAns != -1){
        return root->data;
    }
    else{
        return -1;
    }
}

int main()
{
 
    /* Constructed binary tree is
              1
            /   \
          2      3
        /  \
      4     5
    */
    struct node* root = newNode(1);
    root->left = newNode(2);
    root->right = newNode(3);
    root->left->left = newNode(4);
    root->left->right = newNode(5);
 
    // Function Call
    printf("lca of the given binary tree is %d\n",
           lcaOfbinaryTree(root,2,3));
 
    return 0;
}
